name: 'CI'

on:
  push:
    branches: ['**']

jobs:
  lint:
    runs-on: 'ubuntu-20.04'
    name: 'Python Lint'
    container:
      image: 'python:3.9.2-slim'
    steps:
      - uses: 'actions/checkout@v2'
      - name: 'Install dependencies'
        run: |
          echo "Installing CI requirements"
          pip install --upgrade pip flake8
      - name: 'Flake8 :allthethings:'
        run: |
          python -m flake8 --exclude venv --max-line-length 120

  test:
    name: 'Test'
    runs-on: 'ubuntu-20.04'
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9']
    steps:
      - uses: 'actions/checkout@v2'
      - name: 'Setup python'
        uses: 'actions/setup-python@v2'
        with:
          python-version: ${{ matrix.python-version }}
      - name: 'Install dependencies'
        run: |
          echo "Installing CI requirements"
          pip install --upgrade pip pytest coverage pyfakefs
          echo "Installing Project requirements"
          echo "0.0.0" > VERSION.txt
          pip install --editable .
      - name: 'Run tests'
        run: |
          python -m coverage run --branch -m pytest
      - name: 'Display coverage report'
        run: |
          python -m coverage report --fail-under=80 \
          --omit="*/.local/*","*/tests/test_*","venv/*" -m

  pypi_build:
    needs: ['lint', 'test']
    name: 'PyPi Package Build and Publish'
    runs-on: 'ubuntu-20.04'
    if: |
      !contains(github.ref, 'dependabot')
    steps:
      - uses: 'actions/checkout@v2'
      - name: 'Setup python'
        uses: 'actions/setup-python@v2'
        with:
          python-version: '3.9'
      - name: 'Install PiPy dependencies'
        run: |
          python -m pip install --upgrade build pip twine
      - name: 'Get calculated next version based on commit history'
        id: 'calculated-next-version'
        uses: 'mathieudutour/github-tag-action@v5.3'
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          release_branches: '.*'
          default_bump: 'patch'
          dry_run: 'true'
      - name: 'Generate VERSION.txt'
        run: |
          VERSION=${{ steps.calculated-next-version.outputs.new_version }}
          RUN_ID=${GITHUB_RUN_ID}
          PREFIX=$(echo ${VERSION} | sed -r 's#([0-9]{1,2})\.([0-9]{1,2})\.([0-9]{1,2})#\1\.\2\.dev#g')
          echo "${PREFIX}${RUN_ID}" > VERSION.txt
          cat VERSION.txt
      - name: 'Build'
        run: |
          python -m build --sdist --wheel .
      - name: 'Publish'
        run: |
          echo "[testpypi]
          username = __token__
          password = ${{ secrets.PYPI_TEST }}" > ~/.pypirc
          python -m twine upload --repository testpypi dist/*

  yaml_lint:
    name: 'Yaml Lint'
    runs-on: 'ubuntu-20.04'
    container:
      image: 'python:3.9.5-slim'
    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v2'
      - name: 'Install yamllint'
        run: |
          pip install yamllint
      - name: Lint YAML files
        run: |
          yamllint -d "{extends: relaxed, rules: {line-length: {max: 360}, truthy: { check-keys: false}, document-start: { present: false}}}" -f standard .

